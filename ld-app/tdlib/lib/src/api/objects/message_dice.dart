import 'package:meta/meta.dart';
import '../extensions/data_class_extensions.dart';
import '../tdapi.dart';

/// A dice message. The dice value is randomly generated by the server
@immutable
class MessageDice extends MessageContent {
  const MessageDice({
    this.initialState,
    this.finalState,
    required this.emoji,
    required this.value,
    required this.successAnimationFrameNumber,
  });

  /// [initialState] The animated stickers with the initial dice animation; may
  /// be null if unknown. updateMessageContent will be sent when the sticker
  /// became known
  final DiceStickers? initialState;

  /// [finalState] The animated stickers with the final dice animation; may be
  /// null if unknown. updateMessageContent will be sent when the sticker became
  /// known
  final DiceStickers? finalState;

  /// [emoji] Emoji on which the dice throw animation is based
  final String emoji;

  /// [value] The dice value. If the value is 0, the dice don't have final state
  /// yet
  final int value;

  /// [successAnimationFrameNumber] Number of frame after which a success
  /// animation like a shower of confetti needs to be shown on
  /// updateMessageSendSucceeded
  final int successAnimationFrameNumber;

  static const String constructor = 'messageDice';

  static MessageDice? fromJson(Map<String, dynamic>? json) {
    if (json == null) {
      return null;
    }

    return MessageDice(
      initialState:
          DiceStickers.fromJson(json['initial_state'] as Map<String, dynamic>?),
      finalState:
          DiceStickers.fromJson(json['final_state'] as Map<String, dynamic>?),
      emoji: json['emoji'] as String,
      value: json['value'] as int,
      successAnimationFrameNumber:
          json['success_animation_frame_number'] as int,
    );
  }

  @override
  String getConstructor() => constructor;

  @override
  Map<String, dynamic> toJson() => <String, dynamic>{
        'initial_state': initialState?.toJson(),
        'final_state': finalState?.toJson(),
        'emoji': emoji,
        'value': value,
        'success_animation_frame_number': successAnimationFrameNumber,
        '@type': constructor,
      };

  @override
  bool operator ==(Object other) => overriddenEquality(other);

  @override
  int get hashCode => overriddenHashCode;
}
