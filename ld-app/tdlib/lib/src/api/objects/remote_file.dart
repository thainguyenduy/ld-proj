import 'package:meta/meta.dart';
import '../extensions/data_class_extensions.dart';
import '../tdapi.dart';

/// Represents a remote file
@immutable
class RemoteFile extends TdObject {
  const RemoteFile({
    required this.id,
    required this.uniqueId,
    required this.isUploadingActive,
    required this.isUploadingCompleted,
    required this.uploadedSize,
  });

  /// [id] Remote file identifier; may be empty. Can be used by the current user
  /// across application restarts or even from other devices. Uniquely
  /// identifies a file, but a file can have a lot of different valid
  /// identifiers. If the identifier starts with "http://" or "https://", it
  /// represents the HTTP URL of the file. TDLib is currently unable to download
  /// files if only their URL is known. If downloadFile/addFileToDownloads is
  /// called on such a file or if it is sent to a secret chat, TDLib starts a
  /// file generation process by sending updateFileGenerationStart to the
  /// application with the HTTP URL in the original_path and "#url#" as the
  /// conversion string. Application must generate the file by downloading it to
  /// the specified location
  final String id;

  /// [uniqueId] Unique file identifier; may be empty if unknown. The unique
  /// file identifier which is the same for the same file even for different
  /// users and is persistent over time
  final String uniqueId;

  /// [isUploadingActive] True, if the file is currently being uploaded (or a
  /// remote copy is being generated by some other means)
  final bool isUploadingActive;

  /// [isUploadingCompleted] True, if a remote copy is fully available
  final bool isUploadingCompleted;

  /// [uploadedSize] Size of the remote available part of the file, in bytes; 0
  /// if unknown
  final int uploadedSize;

  static const String constructor = 'remoteFile';

  static RemoteFile? fromJson(Map<String, dynamic>? json) {
    if (json == null) {
      return null;
    }

    return RemoteFile(
      id: json['id'] as String,
      uniqueId: json['unique_id'] as String,
      isUploadingActive: json['is_uploading_active'] as bool,
      isUploadingCompleted: json['is_uploading_completed'] as bool,
      uploadedSize: json['uploaded_size'] as int,
    );
  }

  @override
  String getConstructor() => constructor;

  @override
  Map<String, dynamic> toJson() => <String, dynamic>{
        'id': id,
        'unique_id': uniqueId,
        'is_uploading_active': isUploadingActive,
        'is_uploading_completed': isUploadingCompleted,
        'uploaded_size': uploadedSize,
        '@type': constructor,
      };

  @override
  bool operator ==(Object other) => overriddenEquality(other);

  @override
  int get hashCode => overriddenHashCode;
}
